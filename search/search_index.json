{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"project_setup/","text":"Setting up the Development Environment To ensure a clean and isolated development environment, use a virtual environment created with venv and manage dependencies using pyproject.toml . Additionally, set up pre-commit hooks for code quality checks, including linting with Ruff. Creating a Virtual Environment Create and activate a virtual environment: python -m venv venv venv\\Scripts\\activate Installing Dependencies Once inside the virtual environment, install project dependencies from the pyproject.toml file: pip install -e . Poetry and pip-tools are excellent package managers. As pip won't necessarily handle all dependencies and constraints as effectively as package managers Setting up Pre-commit Hooks and Linting Use pre-commit to enforce code quality standards. Additionally, use ruff for linting. Both packages are in the pyproject.toml file for install. https://pre-commit.com Navigate to your project directory and set up pre-commit hooks: pre-commit install A .pre-commit-config.yaml file is in project directory with config for ruff linting. Whenever you make a commit, pre-commit will run linting with Ruff and enforce code quality standards automatically. https://github.com/astral-sh/ruff-pre-commit","title":"Setup"},{"location":"project_setup/#setting-up-the-development-environment","text":"To ensure a clean and isolated development environment, use a virtual environment created with venv and manage dependencies using pyproject.toml . Additionally, set up pre-commit hooks for code quality checks, including linting with Ruff.","title":"Setting up the Development Environment"},{"location":"project_setup/#creating-a-virtual-environment","text":"Create and activate a virtual environment: python -m venv venv venv\\Scripts\\activate","title":"Creating a Virtual Environment"},{"location":"project_setup/#installing-dependencies","text":"Once inside the virtual environment, install project dependencies from the pyproject.toml file: pip install -e . Poetry and pip-tools are excellent package managers. As pip won't necessarily handle all dependencies and constraints as effectively as package managers","title":"Installing Dependencies"},{"location":"project_setup/#setting-up-pre-commit-hooks-and-linting","text":"Use pre-commit to enforce code quality standards. Additionally, use ruff for linting. Both packages are in the pyproject.toml file for install. https://pre-commit.com Navigate to your project directory and set up pre-commit hooks: pre-commit install A .pre-commit-config.yaml file is in project directory with config for ruff linting. Whenever you make a commit, pre-commit will run linting with Ruff and enforce code quality standards automatically. https://github.com/astral-sh/ruff-pre-commit","title":"Setting up Pre-commit Hooks and Linting"}]}